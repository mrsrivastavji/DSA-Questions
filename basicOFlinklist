class LL{
    Node head;
    private int size;
    
    LL(){
    this.size=0;
    }
    
    class Node{
        String data;
        Node next;
        
        Node(String data){
            this.data=data;
            this.next=null;
            size++;
        }
    }
    
    public void addFirst(String data){
        Node newNode = new Node(data);
        if(head==null){
            head=newNode;
            return;
        }
        
        newNode.next=head;
        head=newNode;
    }
    
    public void addLast(String data){
        Node newNode = new Node(data);
        if(head==null){
            head=newNode;
            return;
        }
        
        Node currNode=head;
        while(currNode.next!=null){
            currNode=currNode.next;
        }
        currNode.next=newNode;
    }
    
    public void printList(){
        if(head==null){
            System.out.println("List is empty!");
            return;
        }
        
        Node currNode=head;
        while(currNode!=null){
            System.out.print(currNode.data+"-->");
            currNode=currNode.next;
        }
       System.out.println("Null");
    }
    
    public void deletFirst(){
        if(head==null){
            System.out.println("List is empty!");
            return;
        }
        
        size--;
        head=head.next;
    }
    
    public void deletLast(){
        if(head==null){
            System.out.println("List is empty!");
            return;
        }
        
        size--;
       if(head.next==null){
           head=null;
           return;
       }
       
       Node SecondLast=head;
       Node LastNode=head.next;
       while(LastNode.next!=null){
           LastNode=LastNode.next;
           SecondLast=SecondLast.next;
       }
       SecondLast.next=null;
    }
    
    public int getSize(){
        return size;
    }
    
    public void reverseList(){
        if(head==null || head.next==null){
            return;
        }
        
        Node preNode=head;
        Node currNode=head.next;
        while(currNode!=null){
            Node nextNode=currNode.next;
            currNode.next=preNode;
            
            preNode=currNode;
            currNode=nextNode;
        }
        head.next=null;
        head=preNode;
            
        }
    
    public Node reverseRecursive(Node head){
        if(head==null || head.next==null){
            return head;
        }
        
        Node newHead=reverseRecursive(head.next);
        head.next.next=head;
        head.next=null;
        return newHead;
    }    
    public static void main(String args[]){
        LL list = new LL();
        list.addFirst("a");
        list.addFirst("is");
        list.printList();
        list.addFirst("This");
        list.printList();
        list.addLast("List");
        list.printList();
        list.head=list.reverseRecursive(list.head);
        
        // System.out.println(list.getSize());
        // list.deletFirst();
        // list.printList();
        // list.deletLast();
        // list.printList();
        // System.out.println(list.getSize());
        // list.reverseList();
        list.printList();
    }
}
